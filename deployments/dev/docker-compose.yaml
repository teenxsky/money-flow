name: money-flow-dev

services:
  nginx:
    container_name: nginx
    build:
      context: ../../
      dockerfile: ./deployments/dev/images/nginx.Dockerfile
    command: ["nginx", "-g", "daemon off;"]
    hostname: ${DOCKER_NGINX_HOST}
    ports:
      - ${NGINX_PORT}:${NGINX_PORT}
    environment:
      - NGINX_PORT=${NGINX_PORT}

      - DOCKER_NGINX_HOST=${DOCKER_NGINX_HOST}
      - DOCKER_BACKEND_HOST=${DOCKER_BACKEND_HOST}
      - DOCKER_FRONTEND_HOST=${DOCKER_FRONTEND_HOST}

      - BACKEND_BASE=${BACKEND_BASE}
      - FRONTEND_BASE=${FRONTEND_BASE}

      - DOCKER_BACKEND_PORT=${DOCKER_BACKEND_PORT}
      - DOCKER_FRONTEND_PORT=${DOCKER_FRONTEND_PORT}
    restart: unless-stopped
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_started

  frontend:
    container_name: frontend
    build:
      context: ../../
      dockerfile: ./deployments/dev/images/frontend.Dockerfile
    command: ["bun", "run", "dev", "--port", "${DOCKER_FRONTEND_PORT}"]
    hostname: ${DOCKER_FRONTEND_HOST}
    ports:
      - ${DOCKER_FRONTEND_PORT}:${DOCKER_FRONTEND_PORT}
    volumes:
      - ./../../frontend:/frontend
    environment:
      - HOST=${DOCKER_FRONTEND_HOST}
      - PORT=${DOCKER_FRONTEND_PORT}
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_started

  backend:
    container_name: backend
    build:
      context: ../../
      dockerfile: ./deployments/dev/images/backend.Dockerfile
    command:
      [
        "poetry",
        "run",
        "python",
        "src/manage.py",
        "runserver",
        "0.0.0.0:${DOCKER_BACKEND_PORT}",
      ]
    hostname: ${DOCKER_BACKEND_HOST}
    expose:
      - ${DOCKER_BACKEND_PORT}
    volumes:
      - ./../../backend:/backend
    environment:
      - NGINX_PORT=${NGINX_PORT}
      - BACKEND_BASE=${BACKEND_BASE}
      - FRONTEND_BASE=${FRONTEND_BASE}

      - DOCKER_BACKEND_HOST=${DOCKER_BACKEND_HOST}
      - DOCKER_POSTGRES_HOST=${DOCKER_POSTGRES_HOST}

      - DOCKER_BACKEND_PORT=${DOCKER_BACKEND_PORT}
      - DOCKER_POSTGRES_PORT=${DOCKER_POSTGRES_PORT}

      - TZ=${TZ}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    env_file:
      - ./conf/.env.backend.local
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    container_name: postgres
    build:
      context: ../../
      dockerfile: ./deployments/dev/images/postgres.Dockerfile
    command: ["postgres", "-c", "port=${DOCKER_POSTGRES_PORT}"]
    hostname: ${DOCKER_POSTGRES_HOST}
    ports:
      - ${DOCKER_POSTGRES_PORT}:${DOCKER_POSTGRES_PORT}
    volumes:
      - pg-data:/var/lib/postgresql/data/
    environment:
      - DOCKER_POSTGRES_HOST=${DOCKER_POSTGRES_HOST}
      - DOCKER_POSTGRES_PORT=${DOCKER_POSTGRES_PORT}

      - TZ=${TZ}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-d",
          "${POSTGRES_DB}",
          "-U",
          "${POSTGRES_USER}",
          "-h",
          "${DOCKER_POSTGRES_HOST}",
          "-p",
          "${DOCKER_POSTGRES_PORT}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

volumes:
  pg-data:
